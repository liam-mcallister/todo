{"version":3,"sources":["components/AddTaskForm.js","components/FilterTasks.js","components/Task.js","App.js","reportWebVitals.js","index.js"],"names":["AddTaskForm","props","useState","name","setName","className","onSubmit","e","preventDefault","alert","addTask","type","autoComplete","value","onChange","target","FilterTasks","aria-pressed","isPressed","onClick","setFilter","Task","isEditing","setIsEditing","newName","setNewName","editTemplate","editTask","id","htmlFor","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","FILTER_MAP","All","Active","task","Finished","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","editedTaskList","map","remainingTasks","updatedTasks","tasklist","filterList","newTask","nanoid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a5fbf1e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst AddTaskForm = (props) => {\r\n  const [name, setName] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (name === '') {\r\n      alert('Enter a task!');\r\n    } else {\r\n      props.addTask(name);\r\n      setName('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-task\">\r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" autoComplete=\"off\" value={name} onChange={handleChange} />\r\n        <input className=\"btn btn-add\" type=\"submit\" value=\"Track It\" />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTaskForm;\r\n","import React from \"react\";\r\n\r\nconst FilterTasks = (props) => {\r\n  return (\r\n    <input\r\n      className=\"btn btn-filter\"\r\n      type=\"button\"\r\n      value={props.name}\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FilterTasks;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Task = (props) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [newName, setNewName] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    setNewName(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (newName === \"\") {\r\n      alert(\"Enter a task!\");\r\n    } else {\r\n      props.editTask(props.id, newName);\r\n      setNewName(\"\");\r\n      setIsEditing(false);\r\n    }\r\n  };\r\n\r\n  const editTemplate = (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"task-top-edit\">\r\n          <label htmlFor={props.id} className=\"editLabel\">\r\n            Edit your task\r\n          </label>\r\n          <input\r\n            id={props.id}\r\n            type=\"text\"\r\n            value={newName}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"task-bottom\">\r\n          <input\r\n            className=\"btn btn-task btn-cancel\"\r\n            type=\"button\"\r\n            value=\"Cancel\"\r\n            onClick={() => setIsEditing(false)}\r\n          />\r\n          <input className=\"btn btn-task btn-save\" type=\"submit\" value=\"Save\" />\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n\r\n  const viewTemplate = (\r\n    <>\r\n      <div className=\"task-top\">\r\n        <label htmlFor={props.id} className=\"task-check\">\r\n          <input\r\n            id={props.id}\r\n            className=\"checkbox\"\r\n            type=\"checkbox\"\r\n            defaultChecked={props.completed}\r\n            onChange={() => props.toggleTaskCompleted(props.id)}\r\n          />\r\n          <span className=\"checkmark\"></span>\r\n        </label>\r\n        <p className=\"task-text\">{props.name}</p>\r\n      </div>\r\n      <div className=\"task-bottom\">\r\n        <input\r\n          className=\"btn btn-task btn-edit\"\r\n          type=\"button\"\r\n          value=\"Edit\"\r\n          onClick={() => setIsEditing(true)}\r\n        />\r\n        <input\r\n          className=\"btn btn-task btn-delete\"\r\n          type=\"button\"\r\n          value=\"Delete\"\r\n          onClick={() => props.deleteTask(props.id)}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  return <li className=\"task\">{isEditing ? editTemplate : viewTemplate}</li>;\r\n};\r\n\r\nexport default Task;\r\n","import React, { useState } from \"react\";\r\nimport AddTaskForm from \"./components/AddTaskForm\";\r\nimport FilterTasks from \"./components/FilterTasks\";\r\nimport Task from \"./components/Task\";\r\nimport \"./App.css\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nconst FILTER_MAP = {\r\n  All: () => true,\r\n  Active: (task) => !task.completed,\r\n  Finished: (task) => task.completed\r\n};\r\n\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\r\n\r\nfunction App(props) {\r\n  const [tasks, setTasks] = useState(props.tasks);\r\n  const [filter, setFilter] = useState('All');\r\n\r\n  // Function to add a task to the list\r\n  const addTask = (name) => {\r\n    const newTask = { id: \"todo\" + nanoid(), name: name, completed: false };\r\n    setTasks([...tasks, newTask]);\r\n  };\r\n\r\n  // Function to edit a task\r\n  const editTask = (id, newName) => {\r\n    const editedTaskList = tasks.map((task) => {\r\n      if (id === task.id) {\r\n        return { ...task, name: newName };\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(editedTaskList);\r\n  };\r\n\r\n  // Function to delete a task from the list\r\n  const deleteTask = (id) => {\r\n    const remainingTasks = tasks.filter((task) => id !== task.id);\r\n    setTasks(remainingTasks);\r\n  };\r\n\r\n  const toggleTaskCompleted = (id) => {\r\n    const updatedTasks = tasks.map((task) => {\r\n      if (id === task.id) {\r\n        return { ...task, completed: !task.completed };\r\n      } else {\r\n        return task;\r\n      }\r\n    });\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  const tasklist = tasks\r\n    .filter(FILTER_MAP[filter])\r\n    .map((task) => (\r\n      <Task\r\n        id={task.id}\r\n        name={task.name}\r\n        completed={task.completed}\r\n        key={task.id}\r\n        toggleTaskCompleted={toggleTaskCompleted}\r\n        editTask={editTask}\r\n        deleteTask={deleteTask}\r\n      />\r\n    ));\r\n\r\n  const filterList = FILTER_NAMES.map((name) => (\r\n    <FilterTasks\r\n      key={name}\r\n      name={name}\r\n      isPressed={name === filter}\r\n      setFilter={setFilter}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"header-container\">\r\n        <h1>Task Tracker</h1>\r\n        <AddTaskForm addTask={addTask} />\r\n      </div>\r\n\r\n      <div className=\"filter-container\">\r\n        <div className=\"filter-tasks\">\r\n          {filterList}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"task-container\">\r\n        <ul className=\"task-list\">\r\n          {tasklist}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst DATA = [\r\n  { id: \"todo-0\", name: \"lorem\", completed: true },\r\n  { id: \"todo-1\", name: \"ipsum\", completed: false }\r\n];\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App tasks={DATA} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}