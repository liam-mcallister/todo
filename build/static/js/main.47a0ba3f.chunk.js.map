{"version":3,"sources":["components/AddTaskForm.js","components/FilterTasks.js","components/Task.js","App.js","reportWebVitals.js","index.js"],"names":["AddTaskForm","props","useState","name","setName","className","onSubmit","e","preventDefault","alert","addTask","type","autoComplete","placeholder","value","onChange","target","FilterTasks","aria-pressed","isPressed","onClick","setFilter","Task","isEditing","setIsEditing","newName","setNewName","editTemplate","editTask","id","htmlFor","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","FILTER_MAP","All","Active","task","Finished","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","editedTaskList","map","remainingTasks","updatedTasks","tasklist","filterList","newTask","nanoid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47a0ba3f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst AddTaskForm = (props) => {\r\n  // Creates a name state with an empty string value\r\n  const [name, setName] = useState('');\r\n\r\n  // This function is fired everytime the user types into the add task input field\r\n  // It stores the value of the input field in the name state via the setName updater function\r\n  const handleChange = (e) => {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  // Fires when the add task button is pressed\r\n  // Display an alert if the input is empty\r\n  // Fires the addTask function (passing in name) which had been handed down from App.js via props\r\n  // Fires the setName updater function to set name as an empty string\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (name === '') {\r\n      alert('Enter a task!');\r\n    } else {\r\n      props.addTask(name);\r\n      setName('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-task\">\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          className=\"task-input\"\r\n          autoComplete=\"off\"\r\n          placeholder=\"Enter a task\"\r\n          value={name}\r\n          onChange={handleChange}\r\n        />\r\n        <input className=\"btn btn-add\" type=\"submit\" value=\"Add Task\" />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTaskForm;\r\n","import React from \"react\";\r\n\r\nconst FilterTasks = (props) => {\r\n  return (\r\n    <input\r\n      className=\"btn btn-filter\"\r\n      type=\"button\"\r\n      value={props.name}\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FilterTasks;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Task = (props) => {\r\n  // Creates a isEditing state that is set to false\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  // Creates a newName state with an empty string value\r\n  const [newName, setNewName] = useState(\"\");\r\n\r\n  // Fired everytime the user types into the edit task input field\r\n  // It stores the value of the input field in the newName state via the setNewName updater function\r\n  const handleChange = (e) => {\r\n    setNewName(e.target.value);\r\n  };\r\n\r\n  // Fired when the save button is clicked\r\n  // If there has been nothing entered an alert will display\r\n  // Otherwise the editTask callback function is called from props (id and newName is passed in)\r\n  // + the newName state is set to an empty string\r\n  // + the isEditing state is set to false\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (newName === \"\") {\r\n      alert(\"Enter a task!\");\r\n    } else {\r\n      props.editTask(props.id, newName);\r\n      setNewName(\"\");\r\n      setIsEditing(false);\r\n    }\r\n  };\r\n\r\n  const editTemplate = (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"task-top-edit\">\r\n          <label htmlFor={props.id} className=\"editLabel\">\r\n            Edit your task\r\n          </label>\r\n          <input\r\n            id={props.id}\r\n            className=\"edit-task\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            value={newName}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"task-bottom\">\r\n          {/*Fires an anonymous function that sets the setIsEditing state to false*/}\r\n          <input\r\n            className=\"btn btn-task btn-cancel\"\r\n            type=\"button\"\r\n            value=\"Cancel\"\r\n            onClick={() => setIsEditing(false)}\r\n          />\r\n          <input className=\"btn btn-task btn-save\" type=\"submit\" value=\"Save\" />\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n\r\n  const viewTemplate = (\r\n    <>\r\n      <div className=\"task-top\">\r\n        <label htmlFor={props.id} className=\"task-check\">\r\n          <input\r\n            id={props.id}\r\n            className=\"checkbox\"\r\n            type=\"checkbox\"\r\n            defaultChecked={props.completed}\r\n            onChange={() => props.toggleTaskCompleted(props.id)}\r\n          />\r\n          <span className=\"checkmark\"></span>\r\n        </label>\r\n        <p className=\"task-text\">{props.name}</p>\r\n      </div>\r\n      <div className=\"task-bottom\">\r\n        {/*Fires an anonymous function that sets the setIsEditing state to true*/}\r\n        <input\r\n          className=\"btn btn-task btn-edit\"\r\n          type=\"button\"\r\n          value=\"Edit\"\r\n          onClick={() => setIsEditing(true)}\r\n        />\r\n        {/*Fires an anonymous function that fires the deleteTask callback function which is passed down via props*/}\r\n        <input\r\n          className=\"btn btn-task btn-delete\"\r\n          type=\"button\"\r\n          value=\"Delete\"\r\n          onClick={() => props.deleteTask(props.id)}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  // If isEditing is true then render the editTemplate, otherwise render the viewTemplate\r\n  return <li className=\"task\">{isEditing ? editTemplate : viewTemplate}</li>;\r\n};\r\n\r\nexport default Task;\r\n","import React, { useState } from \"react\";\r\nimport AddTaskForm from \"./components/AddTaskForm\";\r\nimport FilterTasks from \"./components/FilterTasks\";\r\nimport Task from \"./components/Task\";\r\nimport \"./App.css\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n// Object that stores the three filters\r\n// All returns all tasks\r\n// Active returns the tasks that are not completed\r\n// Finished returns all completed tasks\r\nconst FILTER_MAP = {\r\n  All: () => true,\r\n  Active: (task) => !task.completed,\r\n  Finished: (task) => task.completed\r\n};\r\n\r\n// Creates an array of FILTER_MAP keys (All, Active and Finished)\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\r\n\r\nfunction App(props) {\r\n  // Creates a tasks state that takes the placeholder tasks from index.js via props\r\n  const [tasks, setTasks] = useState(props.tasks);\r\n  // Creates a filter state with a string value of 'All'\r\n  const [filter, setFilter] = useState('All');\r\n\r\n  // Callback function to add a task to the list\r\n  // Creates a newTask object with a unique id (nanoid plugin)\r\n  // + a name using the add task input and a false completed value\r\n  // Fires the setTasks function which adds the newTask to the tasks array and updates the state\r\n  const addTask = (name) => {\r\n    const newTask = { id: \"todo\" + nanoid(), name: name, completed: false };\r\n    setTasks([...tasks, newTask]);\r\n  };\r\n\r\n  // Function to edit a task\r\n  // Gets fired from clicking the save button when editing a task\r\n  // Creates a new array by mapping through the list of tasks\r\n  // + if the targets id matches an id in the task list\r\n  // + then returns the tasks with the edited tasks new name\r\n  // Otherwise the tasks are returned unchanged\r\n  // The tasks state is updated with the editedTasksList\r\n  const editTask = (id, newName) => {\r\n    const editedTaskList = tasks.map((task) => {\r\n      if (id === task.id) {\r\n        return { ...task, name: newName };\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(editedTaskList);\r\n  };\r\n\r\n  // Function to delete a task from the list\r\n  // Gets fired from clicking the delete button on a task\r\n  // Creates a new array by filtering the tasks array and returning the remaining tasks\r\n  // + whose id does not match the deleted one\r\n  // Fires the setTasks function to update the tasks state by passing in the new remainingTasks array\r\n  const deleteTask = (id) => {\r\n    const remainingTasks = tasks.filter((task) => id !== task.id);\r\n    setTasks(remainingTasks);\r\n  };\r\n\r\n  const toggleTaskCompleted = (id) => {\r\n    const updatedTasks = tasks.map((task) => {\r\n      if (id === task.id) {\r\n        return { ...task, completed: !task.completed };\r\n      } else {\r\n        return task;\r\n      }\r\n    });\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  // Maps through the list of tasks and creates a Task component for each one\r\n  // Passes each Task an id, name, completed and key attribute\r\n  // toggleTaskCompleted, editTask and deleteTask functions are passed down to FilterTasks.js via props\r\n  const tasklist = tasks\r\n    .filter(FILTER_MAP[filter])\r\n    .map((task) => (\r\n      <Task\r\n        id={task.id}\r\n        name={task.name}\r\n        completed={task.completed}\r\n        key={task.id}\r\n        toggleTaskCompleted={toggleTaskCompleted}\r\n        editTask={editTask}\r\n        deleteTask={deleteTask}\r\n      />\r\n    ));\r\n\r\n  const filterList = FILTER_NAMES.map((name) => (\r\n    <FilterTasks\r\n      key={name}\r\n      name={name}\r\n      isPressed={name === filter}\r\n      setFilter={setFilter}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"header-container\">\r\n        <h1>Task Tracker</h1>\r\n        <AddTaskForm addTask={addTask} />\r\n      </div>\r\n\r\n      <div className=\"filter-container\">\r\n        <div className=\"filter-tasks\">\r\n          {/* Renders the filter buttons */}\r\n          {filterList}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"task-container\">\r\n        <ul className=\"task-list\">\r\n          {/* Renders the list of tasks */}\r\n          {tasklist}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n// Placeholder tasks passed down to App.js via props\r\nconst DATA = [\r\n  { id: \"todo-0\", name: \"Pickup groceries\", completed: true },\r\n  { id: \"todo-1\", name: \"Wash car\", completed: false }\r\n];\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App tasks={DATA} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}